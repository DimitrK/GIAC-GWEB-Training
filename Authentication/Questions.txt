- What is the purpose of authentication?
    To make sure that the user is who he claims to be. Otherwise, without authentication, the application would have to treat all the users as anonymous.

- What are the risk factors related to authentication?
    Spoofing
    Tampering
    Repudiation
    Information disclosure
    DoS
    Elevation of privilege

- List some examples of authentication controls
    Enforce strong password and username uniqueness
    Strong authentication: token base or 2 factor authentication
    Re-authentication
    Use centralized system, such as single sign-on, identity and access management technologies
    Encryption
    Hashing
    General error messages
    Limit the logins attempts (or gradually add a delay for next attempt) (DoS mitigation)

- Beside common username/password authentication, what can an application implement to be more secure regarding authentication?
    - Challenge-response token (ex: CAPTCHA), client certificates, smartcards, out-of-channel authentication

- What kind of exploit can be executed regarding the authentication mechanism?
    - List usernames, guess passwords, bypass login function by exploiting defects in its logic, reset password, spoofing

- List 3 HTTP authentication scheme and describe them.
    Basic: send user credentials as Base64-encoded string in a request header with each message
    NTLM: challenge-response mechanism and uses a version of the Windows NTLM protocol
    Digest: challenge-response mechanism and uses MD5 checksums of a nonce with user's credentials

- Are those authentication scheme used on the internet?
    Rarely, mostly within organizations to access intranet-based services

- Is Basic authentication secure?
    If it is served over HTTPS, yes. Otherwise, it will be easy to eavesdrop the credentials.

- List some authentication technologies
    Authentication services: For example, Microsoft passport
    Client-side SSL certificate: implemented in smartcards. Big overhead on administering and distribution, only for security-critical systems.
    HTML forms-based authentication: 90% of the web
    HTTP-based authentication

- List design flaws in the authentication mechanisms and describe them.
    Bad passwords
        None, or minimal controls over the quality of users' passwords. Common mistakes are:
            Very short or blank
            Common dictionary words or name
            The same as the username
            Still set to a default value
    Brute-forcible login
        - Given a list of common username and a list of common passwords, is it getter to try all the username for one password at a time or the other way around? Why?
            All username for one password. You are likely to find accounts with common passwords more quickly, and it help to lower the chances to trigger an account lockout mechanism
    Verbose failure messages
        - What kind of attacks can be derived from those verbose messages?
            Username listing can lead to social engineering, password guessing, attacks on user data or sessions
        - What other places can those messages be found?
            Registration (ex: twitter, cannot have a duplicate username)
            Forgot password (cannot be the same as before)
        - What tool can you use to distinguish the differences between a valid username + invalid password and invalid username + invalid password?
            Burp Comparer -> compare the two responses, check if there are semantics differences between the responses
        - What other trick can be used to list usernames if there are no explicit message?
            The time of response. When receiving a valid username, some servers will get user details from the back-end and then validate the password. Might have a lot of false positive, but is still better than pure guessing
    Vulnerable transmission of credentials
        - Where can potential eavesdroppers may reside?
            On the user's local network
            Within the user's IT department
            Within the user's ISP
            On the Internet backbone
            Within the ISP (Internet Service Provider) hosting the application
            Within the IT department managing the application
        - How could the credentials be disclosed if the application handles them over HTTPS?
            Credentials are transmitted as query parameters, as opposed to in the body of a POST request. These can be logged in various places (browser history, web server logs, logs of proxies hosting the infrastructure)
            Enven if a POST is used, sometimes a redirect is done, and the credentials are passed as query parameters in the redirect, therefore the above risk is still present.
            Credentials are somtimes stored in cookies. For example, for a poor remember me implementation. Those cookies are vulnerable to attacks that target cookies.
        - Should the login page itself be delivered over HTTPS? Why?
            Yes, because a user cannot verify the authenticity of the login page itself. He cannot certify that the credentials are sent securely.
    Password change functionality
        - How can an attacker exploit the change password functionnality?
            Verbose error message indicating whether the requested username is valid
            Allow unrestricted guesses of the existing password field
            Check that the new password and confirm password fields are the same after ckecing the current password, allowing noninvasive attack
            Send a different username in the change password request to brute force/change the password of another user.
    Forgotten password functionality
        - What kind of weaknesses can be found?
            Secondary challenge, like questions about your pet, favorite color, etc. It generaly has a little set of possible answers. Concern information that is generally publicly available.
            Brute forcing the secondary challenge
            Passwords hint that is too obvious or is the password itself
            Some application display the password to the user after a successful secondary challenge.
            Send unique URL to the email address specified at the recovery step..
            Pattern in the unique URL sent to the user
        - What is a secure way to implement this functionnality?
            Send a time limited unique URL to the email address associated with the user account.
            Need to call the service to get new password
        - Is it important to notify the user by email when his password has changed?
            Yes, otherwhise, he will only notice that there is a problem the next time he tries to connect to his account.
    Remember me functionality
        - List some common vulnerabilities.
            Simple persistent cookie, like the username
            Pattern in the remember me cookie
            May still be vulnerable to XSS even if the token is encrypted and not guessable
    Incomplete validation of credentials
        Some applications troncate passwords and only validate after n characters.
        Some applications truncate unusual characters
    Predictable usernames
        An application that generates the usernames following a discernable pattern
    Predictable initial passwords
        More common on intranet-based applications
    Insecure distribution of credentials
        Account activation URLs that are predictable
        Default password that does not have a limited life time
        User not prompted to change the default password after first login

- List implementation flaws in authentication
    Fail-open login mechanisms
        For example: send a null as username, throws an exeption, authentication is ok. Even if the attacker does not have access to all functionnality, it can be dangerous
    Defects in multistage login mechanisms
        - Is multistage login mechanisms less prone to security bypasses than username/password auth?
            No. It can definitly lead to better security, but it also add complexity, and so, more possiblity to implementation flaws.
        What kind of dangerous assumption some multistage auth mechanisms make?
            You are at stage 3, then it means you have succeeded 1 and 2
            The data validated at stage one can be trusted at stage 2
            Application assumes that the same user identity is used to complete each stage
    Insecure storage of credentials
        Password stored in clear text or weak cypher or weak hash in db.

- What do you trade off against secure authentication?
    Functionnality, usability, total cost.

- What are the factors to consider to hit a proper balence between security and usability regarding authentication?
    The criticality of security given the functionality the application offers
    The degree to which the users will tolerate and work with different types of authentication controls
    The cost of supporting less user-friendly systems
    The value of the assets it protects vs the income generated by the application

- What are the most effective ways to defeat most attacks against authentication mechanisms?
    Use strong credentials
        - What does it mean?
            Minimum password quality requirements: length, complexity, etc.
            Usernames should be unique
            System-generated usernames and passwords should have enough entropy
            Long passwords with special characters should be allowed
    Handle credentials secretively
        - What does it mean?
            Client-server communication protected using cryptographic technology (TLS)
            Login page in HTTPS
            POST for credentials
                - Why?
                    Credentials should never be placed in URL, parameters or cookies. They should never be transmitted back to the client.
            Use hash + salt to store credentials server side
    Validate credentials properly
        - What does it mean?
            Passwords validated in full (no filtering, modification of any kind)
            Impersonation should be audited
            Multistage logins must be strickly controlled
                - How?
                    The data of the stages are kept on the server, nerver re-transmitted to the client
                    No items can be submitted more than once
                    At each stage, verify that the previous stages were completed
                    Complete all the stages, even if one is invalid, that way it does not disclose any information to the attacker
    Prevent information leakage
        - What does it mean?
            Do not disclose any information about authentication parameters
        - How do you implement self-registration in a way that eliminate the risk of user enumeration?
            The application can create the username
            Use an email address. If the address is already registered, the user is informed in the email, not in the application itself.
    Prevent brute-force attacks
        - What does it mean?
            Block/gradually restrict access to the account
                DoS possible
            Do not verify credentials once the account is blocked, otherwise it might still be possible to brute force the credentials, given the applications returns different error messages when the credentials are good.
            Use CAPTCHA on sensitive page/action
    Prevent misuse of the password change function
        - What does it mean?
            Should be accessible only from the authenticated session
            Do not provide a facility that specify the username (change pswd of other user)
            Required to reenter existing password
            Compare the new password before confirming the existing one
    Prevent misuse of the account recovery function
        - What does it mean?
            Do not use hints
            Use a unique time-limited unguessable single-use recovery email.
            Do not disclose the forgotten password or drop the use in an authenticated session
    Log, monitor and notify
        - What does it mean?
            Log all authentication relateds events (login, logout, password change, browser cache, application cache, etc.)
            Log possible intrusions and alert application owners
            Out-of-band notification to users for security event/issue

- What is single sign-on? (SSO)
    User/session authentication process that permits a user to enter a username/password credential in order to access multiple applications.

    - What are the advantages?
        Reduced time to access data
        Improved user experience
        Ease burden on developers

- What are the types of SSO?
    Web SSO: needs cookies, for a single domain
    Password synchronization: coordinates passwords accross devices or applications, each of them still need to authenticate, but do it behind the scene
    Enterprise SSO: after primary authentication, further login prompts are intercepted and filled for the user.
    Cross domain SSO

- Give a library that can be used for SSO.
    OpenID, used by Fb, Google, Stack Exchange
    Kerberos

- How does Kerberos works behind the scene?
    It uses cryptographic keys so that communicating parties can trust the identity of the other.

- What is OAuth?
    Allows an application to authenticate against a server as a user, without requiring passwords, it uses a token generated by the server.

- What is thrid-party session sharing?
    For example, any Twitter/Facebook based applications. Those applications will use a password-less authentication mechanism, such as OAuth, to authenticate to the base application.

- What are the the test strategies that can be put in place regarding authentication?
    Test for default credentials (of new accounts)
    Test for weak lockout mechanisms (evaluate ability to mitigate brute force attacks and unauthorized account unlocking)
    Test for browser cache
    Test for weak password policy
    Test for credentials transported over encrypted channel
    Test for weaker authentication in alternative channel
    Test weak password change/reset functionality
    Test remember me functionnality (password in cookie? What kind of hash? credentials only sent at login? Consider this for secret questions too)
    Test for dictionnary attacks

- How NOT to implement the remember me functionnality?
    base64 the credentials in the cookies
    HTTP and Secure flags not set for the cookie

- How to implement long-expiring cookies?
    Instead of adding a cookie with the credentials/a hash/a token, set the expiration date of the AuthToken to some time in the future (instead of expiration set to session)

- What is OpenID Connect?
    Log in using Google, Facebook, etc. Use credentials from another account. Makes authentication someone else problem.