- What is CSRF?
    An attack that forces the user to execute an unwanted action.

- What does it target?
    State change, not data theft, since the attacker cannot see the response associated with the request. More likely to be targetted are: social media, anything that transfer money.

- What kind of action the user could be executing against its will?
    Password or email address change, func transfer, etc. If the victim is an admin, the entire application can be at risk.

- How does it work?
    In many websites, browser requests automatically include AuthToken, Windows credentials, session cookie, etc. Therefore, the server as no way to know if the request comes from the legetimate user or if the request has been forged.

- Is it possible to store a CSRF attack?
    Yes, into an image or an iframe if there is a field that accepts HTML. Therefore, a combination of XSS and CSRF is possible.

- Give 4 mitigation techniques that do NOT work.
    Using HTTPS
    Using a secret cookie. There is no "secret" cookie, they are included in all requests (if the path value matches).
    Only accepting POST requests. The logic: an attacker cannot forge a POST request. But there are techniques that comes around this problem: hosted on the attacker site with hidden fields, which are trigered with JS or the tricked user.
    URL re-writing. The user's credentials are exposed in the URL.

- Give an example with a GET request:
    GET http://bank.com/transfer.do?acct=SOMEONE&amount=100 HTTP/1.1

    to

    GET http://bank.com/transfer.do?acct=ATTACKER&amount=100000 HTTP/1.1

- Give an example with a POST request:
    The only difference with GET is how the request is executed by the victim.

    POST http://bank.com/transfer.do HTTP/1.1

    acct=BOB&amount=100

    This cannot be executed by the victim in an image, but it can in a form.

- How does an attacker create a CSRF for a PUT?
    - With a script that creates and send the request.

- Name 2 ways to solicitate the user to click on the malicious link.
    Sending an email
    Planting the URL or the script in a page likely to be visited by the victim while she is logged on the targeted website.

- How could it be included in an image?
    <a href="http://bank.com/transfer.do?acct=MARIA&amount=100000">View my Pictures!</a>

- How could the URL be executed without it to be clicked by the user?
    Include an image (can be 0 x 0) in an email that you send to the user. The link will be executed by the browser automatically. This is why emails from unknown providers have the images blocked by default nowadays.

    <img src="http://bank.com/transfer.do?acct=MARIA&amount=100000" width="0" height="0" border="0">

- How can you mitigate the CSRF attack?
    Synchronizer Token Pattern:
        - How does it work?
            Any state changing operation requires a secure random token (ie a CSRF token).
            Characteristics of the token: Unique per user and per user session. Tied to a single user session. Large random value. Generated by a secure cryptographic random number generator. It is added as a hidden field in forms or within the URL for each GET requests.
            The server rejects the request if the validation does not work. If it does not work, the event should be logged as a potential CSRF attack.
        - How could the attacker overcome this?
            By guessing the random token.
        - Only works if...?
            The website uses TLS.
        - Is it suitable to use a per request token instead of a per session token?
            If the lost of usability is not a concern or is less important than the protection of the user, then yes. For example, the back button would not work and it will be registered as a false CSRF.
        - How could it potentially be leaked?
            Browser history, HTTP log files
            - How could it happen over HTTPS?
                Via referer. If the referer header is parsed by a linked site, it will be easy to launch (even automate) a CSRF attack since the referer header contains the website and the CSRF token.
                Solution?
                    - Use POST instead of GET for requests that requires CSRF tokens.


    Checking the referer header
        - Why is it safe?
            The referer header cannot be spoofed in a CSRF attack.
        - When should it be used?
            When memory is in short supply. On unauthenticated requests, like before establishing a session state which is required to keep track of a synchronization token.
        - What are the limitations?
            It is a weaker form of CSRF because of open redirects vulnaribilities can be used to exploit GET requests. It can also be badly implemented: over HTTPS the referer header is omitted. XSS cxan be used to bypass a referer check.

    Checking the origin header
        - What is the difference with the referer header?
            Unlike the referer header, it will be send over HTTPS.

    Challenge response
        - What is a challenge response and give examples. What is the limitation?
            CAPTCHA, re-authentication, one-time token. It is a very strong defense angainst CSRF, but it impacts user experience.

- What are the end-user best practices to prevent CSRF?
    Logoff immediately after using a web application. Do not allow your browser to save username/pswd and do not allow sites to remember your login. Do not use the same browser to access sensitive applications and to surf the Internet.

- How can you test for CSRF vulnerabilities?
    Create an html page containing the request to the target site. Make sure the  valid user is logged in the application. Induce him to follow the link pointing to the URL to be tested. Check if the web server executed the request.

- How can you review code for CSRF?
    