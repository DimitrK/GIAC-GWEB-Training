- Difference between authentication and access control?
    Prevent unwanted tampering with data files and system resources.

- What is the security issue covered by access control?
    Horizontal and vertical privilege escalation

- What is a simmilar name for access control?
    Authorization

- Access control is built on what?
    Authentication and session management.

- What key decisions are made by the access control?
    Permit the given request to perform its attempted action
    Access the resource it is requesting

- Is access control a risk if session management and login are security proof?
    Yes.

- Does it need to be applied at each request?
    Yes.

- What are the three categories of access control?
    Vertical
        user vs. Admin
    Horizontal
        Transfert money for someone else
        ex: mysite.com/viewdoc.html?docId=143243234 if only one user can access that document, what happens if other users have access to it?
            - Where can an attacker find those information?
                A good source is application logs.
    Context-dependent
        Ensure that users' access is restricted to what is permitted given the current state of the application. Accessing stages out of the prescribed order can be prevented if needed. Ex: bypass payment step in a shopping checkout sequence

- Are you secure if you do not expose the high-privilege URL to the low privilege users?
    No, it can be guessed, disclosed, mapped, etc.

- What other security critical implementation can be disclosed with URLs?
    Direct access methods
        ex: mysite.com/public/securitycheck/getCurrentUserRoles

- Give an example of multistage functions bypass.
    Stage 1 select add new user
    Stage 2 enter user info + submit

    If stage 1 verified but attacker goes directly to stage 2, the attack will succeed if no veirification is made on stage 2

- What is the danger of static files on the server regarding access control?
    Access control is often not applied on static files (mysite.com/download/somefile.pdf), just know the URL and you are done.

- How can the platform be a problem for access control?
    Misconfiguration of the platform. It is akin to firewall (only users of the admin group can access /admin).

    - Give an example of misconfiguration.
        Admin can create a new user with a POST request. If GET requests are not blocked, attacker may be able to create a user by simply changing the HTTP verb.

        HEAD is like a GET, but without any reponse body. Attacker might try to create a user with this HTTP verb

        Some platforms uses unrecognized HTTP verbs as a GET (...)

- What are the insecure access control methods? Describe them.
    Parameter-based access control
        mysite.com/home?admin=true
    Referer-based access control
        Ex: Main admin page accessible only by admin users, but any admin actions checks that the referer is the admin page. Useless since the referer is controlled by the user.
    Location-based access control
        Common way: IP address
        To bypass:
            Web proxy based in the rerquired location
            VPN that terminates in the required location
            Mobile device that supports data roaming
            Direct manipulation of client-side mechanisms for geolocation

- How do you attack access controls?
    First, it is good to map the application, it helps to understand the application requirements in terms of access controls.

    Do application functions give individual users access to a particular subset of data that belongs to them?

    Is there different level of users?

    Admin functionality built in same application to build it?

    What functions or data resources you have identified would most likely help you in that matter?

    Are there any identifiers that signal a parameter is being used to track access levels?

    - What thecniques can you use to identify vulnerabilities?
        Test with different user accounts
            And with admin ones if possible

            Use Burp to compare the mapping results between two different context (user accounts)

            You can then pin point possible entry points

        Test multistage processes
            Every stage must be tested individually for access control

            Find locations the application assumes that if you are at that point, you have arrived via legitimate means. Try to reach that point in other ways with lower-privileged account.
                (Switch token for one of less privileged user during different stages of the process)

- How do you test with limited access to the application features? (with low privileged account)
    Map the site (some parts might not be accessible)
    Try to add parameters such as admin=true to the URL or POST request of pages the could have supplementary functionnality
    Test if the referer header is used as the basis for making access control decisions.
        Remove the referer header from requests that works for you, if they don't anymore, then you probably have found an access control vulnerability
    Review client-side HTML to find references to hidden functionnality or that can be manipulated client-side.

- How do you test access control restrictions on HTTP methods?
    Using a high-privileged account, identify privileged requests
    Check if these requests are protected by any anti-CSRF tokens or similar features
    Check if the application honnors other HTTP verbs
        If yes, test the request with lower-privileged account with different HTTP verb

- What are the pitfalls to avoid when implementing access control?
    Do not rely on users' ignorance of application URLs or identifiers used to specify application resources.
    Do not trust any user-submitted parameters to signify access rights
    Do not assume that users will access application pages in the intended sequence
    Do not trust the user not to tamper with any data that is transmitted via the client
    Do not allow the code to run with too high privileges

- What are the the best-practices to implement effective access control?
    Explicitly evaluate and document what role has access to what
    Drive all access control decisions from user's session
    Use a central application component to check access controls
        Process every client request via this component
    For static files, either access them indirectly by passing the filename to the server or by HTTP authentication of the application server to wrap the incomming request and check the resource's permissions before access is granted. You can also generate them on the fly instead and do not store them on the server.
    Log every event where sensitive data is accessed or a sensitive action is performed.
    Check the protected resources: banking: check if user is allowed to transfert money, but does not check that the from account is the user's

- What is a multilayered privilege model?
    Defense in depth: should implement access control at web app, application server, db and OS layers.
        ex: the application can employ a different db account when carrying out the actions of different users. Fine grained access (up to the columns) can be implemented. The os accounts used to run each component in the infrastructure can be restricted to the least powerful privileges that the component requires.

- What kind of security model can be implemented for complex security critical applications?
    Programmatic control
        The table of privileges is stored in a db and is applied programmatically, can be extremely fine grained
    Discretionary access control
        Admins give/remove rights to users
    Role-based access control
        Hard to do fine grained stuff, number of roles need to be well balanced
    Declarative control
        The application uses restricted db accounts, different accounts for each group of users

- What are the possible security issues related to each previous model?
    Programmatic control
        Injection attack
    Role defined
        May be incomplete
        A single exploitable access can allow to modify the role of your account, therefore elevating the permission on the db and/or the os
    Declarative controls
        Read access on os can still be dangerous

- What is the principle of least privilege?
    Allow running code only the permissions needed to complete the required task and no more.

