- What security related problem URL encoding solves?
	It is a scheme that is used to encode any problematic characters within the extended ASCII character set so that they can be safely transported over HTTP.

- How can an attack succeed with unicode/utf-8 encoding?
	It may be possible to bypass the filter, then if the component processing the input understands unicode, the component/application can be owned.

- What is the security purpose of HTML encoding?
	To represent problematic characters so that they can safely be incorporated into an HTML document.

- When is Base64 encoding used?
	Allows any binary data to be safely represented using only printable ASCII characters.

	Commonly used to encode email attachements for safe transmission over SMTP.

	Used to encode user credentials in basic HTTP authentication

	- Why is there on or two = sometimes at the end of a Base64 encoded string?
		Since it encodes by chucks of 6 bits (64 possiblities), sometimes it needs padding, this is what = are for.

- What are the common approches to input handling? Describe them.
	Reject known bad (blacklisting)
		Least effective approach to validate user inputs (patterns can be ommited and exploitation techniques always evolve)
	Accept known good (whitelisting)
		Most effective way to handle user inputs. (The whitelist must be properly implemented though, especially with regex for example)
	Sanitization
		Potentially malicious characters may be removed from the data or suitably encoded. Generally highly effective. If several kinds of potentially malicious data need to be accomodated in one item of input, it can be harder.
	Safe data handling
		Ex: prevent SQLi by parameterizing the queries. Not applicable everywhere, but is effective.
	Semantic checks
		Ex: check that the account number given in the request is belongs to the user who submitted the request.

- Is input validation client-side sufficient?
	No. It must also be done on the server-side. This is one of the biggest trust boundary. It is possible to send request to the server without using the upper (web) application.

- Is it possible to prevent all categories of attack simultaneously at the application external boundary?
	Not all the time. Therefore a defense in depth approach is (as always) suitable. Ex: preventing XSS (encoding) and cmd injection (block & and ;) at the same time? Maybe, maybe not.

- What is the boundary validation concept?
	Each individual component of the server-side application treats its inputs as coming from a potentially malicious source. Each componenet can defend itself against the specific types of crafted input.

- Give an example of the danger to simply remove potential malicious contents from user's input.
	If the application removes <script> from user's input, then the follwing payload will succeed : <scr<script>ipt>

	- Given the above, is validation order important?
		Yes, the order of validation can be exploited to bypass the validation (ex: once all the removing stpes are done, the result is a malicious script)

- What is the danger related to encoding the data so that it is safely transmitted over HTTP?
	Ex: (poor) SQLi mitigation: remove the ' character. then encode the string to latter on decode it. If the attacker double URL encode ', the server performs the normal URL decode, the payload passes the filters, then it is decoded and becomes an '

- What is the special treatment that some browser do to the src html attribute that can be leveraged by attackers?
	Some of them HTML decode the src attribute automatically, the embeded JS executes

